package leetcode;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

/**
 * 문제 : https://leetcode.com/problems/number-of-islands/
 * 레벨 : Medium
 * 결과 : 해결(runtime 17ms faster than 9.85%, memory 55.9MB less than 60.49%)
 */

public class NumberOfIslands {

    public static int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int idx = 2;
        int[][] map = new int[m][n];

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){

                if(grid[i][j] == '1' && map[i][j] == 0) {

                    Queue<int[]> queue = new LinkedList<>();
                    queue.add(new int[]{i, j , idx});
                    map[i][j] = idx;
                    grid[i][j] = '2';

                    while(!queue.isEmpty()){

                        int[] poll = queue.poll();
                        int x = poll[0];
                        int y = poll[1];
                        int index = poll[2];
                        map[x][y] = index;
                        grid[x][y] = '2';

                        if(x > 0 && grid[x-1][y] == '1'){
                            queue.add(new int[]{x-1, y, index});
                            map[x-1][y] = index;
                            grid[x-1][y] = '2';
                        }
                        if(x < m-1 && grid[x+1][y] == '1'){
                            queue.add(new int[]{x+1, y, index});
                            map[x+1][y] = index;
                            grid[x+1][y] = '2';

                        }
                        if(y > 0 && grid[x][y-1] == '1'){
                            queue.add(new int[]{x, y-1, index});
                            map[x][y-1] = index;
                            grid[x][y-1] = '2';

                        }
                        if(y < n-1 && grid[x][y+1] == '1'){
                            queue.add(new int[]{x, y+1, index});
                            map[x][y+1] = index;
                            grid[x][y+1] = '2';

                        }
                    }
                    idx++;
                }
            }
        }

        HashSet<Integer> cntIsland = new HashSet<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(map[i][j] != 0)
                    cntIsland.add(map[i][j]);
            }
        }

        return cntIsland.size();


    }


    public static void main(String[] args) {
        char[][] grid = {
               /* {'1','1','1','1','0'},
                {'1','1','0','1','0'},
                {'1','1','0','0','0'},
                {'0','0','0','0','0'},*/
                /*{'1','1','0','0','0'},
                {'1','1','0','0','0'},
                {'0','0','1','0','0'},
                {'0','0','0','1','1'}*/

                        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
        };

        System.out.println(numIslands(grid));
    }
}
